// Написать функцию, которая принимает в качестве параметров
// 1) chessBoard - ВАЛИДНОЕ состояние шахматной доски с шашками. Это будет двумерный массив строк, где:
// " " - отсутствие шашки на клетке
// "white" - присутствие БЕЛОЙ шашки на клетке
// "black" - присутствие ЧЕРНОЙ шашки на клетке
// Важно понимать, что доска, всегда смотрит белой стороной на нас, т.е. клетка А1 находится в левом нижнем углу!
// 
// [
//     [" ", "black", " ", "black", " ", "black", " ", "black"],
//     ["black", " ", "black", " ", "black", " ", "black", " "],
//     [" ", "black", " ", "black", " ", "black", " ", "black"],
//     [" ", " ", " ", " ", " ", " ", " ", " "],
//     [" ", " ", " ", " ", " ", " ", " ", " "],
//     ["white", " ", "white", " ", "white", " ", "white", " "],
//     [" ", "white", " ", "white", " ", "white", " ", "white"],
//     ["white", " ", "white", " ", "white", " ", "white", " "]
// ]
// 
// К примеру так выглядит доска когда игра только начинается, и ещё никто не успел сделать ход.
// По правилам шашек шашки размещаются и могут находиться только на черных клетках, так как ходить они могут только по диагонали.
// Отсутстиве шашок на белых клетках считается ВАЛИДНЫМ состоянием доски.
// 
// 2) letter - Выбранная буква клетки (a,b,c,d,e,f,g,h)
// 3) number - Выбранный номер клетки (от 1 до 8)
// 
// letter и number в сочетании позволяют точно определить клетку, которую мы выбираем.
// 
// Функция в свою очередь возвращает максимальное количество шашек, которое можно срубить за ход.
// Если шашке при этом удалось стать дамкой, то возвращаем это число со знаком минус.
// 
// При этом в нашем случае всегда предпочтительнее стать дамкой, чем не стать,
// например если на вход подадим такое состояние доски
// 
// [      
//        a    b    c    d    e    f    g    h
//  8   [" ", " ", " ", " ", " ", " ", " ", " "],         8
//  7   [" ", " ", "black", " ", " ", " ", " ", " "],     7
//  6   [" ", "white", " ", " ", " ", " ", " ", " "],     6
//  5   [" ", " ", " ", "black", " ", " ", " ", " "],     5
//  4   [" ", " ", " ", " ", " ", " ", " ", " "],         4
//  3   [" ", " ", " ", " ", " ", "black", " ", " "],     3
//  2   [" ", " ", " ", " ", " ", " ", " ", " "],         2
//  1   [" ", " ", " ", " ", " ", " ", " ", " "]          1
//        a    b    c    d    e    f    g    h
// ]
// А в letter и number передадим b и 6 соответственно, то наш алгоритм должен будет вернуть (-1).
// Т.е. срубить 1 шашку и стать дамкой, вместо сруба 2 шашек.

const chickiBrickiVDamki = (chessBoard, letter, number) => {
  // ЗДЕСЬ ТВОЙ КОД
};

module.exports = chickiBrickiVDamki;